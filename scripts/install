#!/usr/bin/env bash
set -o nounset

###
# Configuration
###

# name|test|testparam
dependencies=(
	zsh
	git
	vim
	curl
)

# file|graphical?
linkfiles=(
	"$HOME/.zlogin:zsh/zlogin|no"
	"$HOME/.zlogout:zsh/zlogout|no"
	"$HOME/.zprofile:zsh/zprofile|no"
	"$HOME/.zshenv:zsh/zshenv|no"
	"$HOME/.zshrc:zsh/zshrc|no"
	"$HOME/.vim/vimrc:vim/vimrc|no"
	"$HOME/.tmux.conf:misc/tmux.conf|no"
	"$HOME/.config/htop/htoprc:misc/htoprc|no"
	"$HOME/.config/git/config:misc/gitconfig|no"
	"$HOME/.vim/autoload/plug.vim:vim/vim-plug/plug.vim|no"
	"$HOME/.gnupg/gpg.conf:gpg/gpg.conf|no"
	"$HOME/.gnupg/gpg-agent.conf:gpg/gpg-agent.conf|no"
	"$HOME/.gnupg/dirmngr.conf:gpg/dirmngr.conf|no"
	"$HOME/.ssh/config:misc/ssh_config|no"
	# Graphical stuff
	"$HOME/.config/gtk-2.0/gtkrc:graphical/gtk/gtkrc-2.0|yes"
	"$HOME/.mozilla/native-messaging-hosts/passff.json:graphical/firefox/passff.json|yes"
	"$HOME/.config/gtk-2.0/gtkfilechooser.ini:graphical/gtk/gtk2.0-filechooser.ini|yes"
	"$HOME/.config/gtk-3.0/settings.ini:graphical/gtk/gtkrc-3.0|yes"
	"$HOME/.config/gtk-3.0/bookmarks:graphical/gtk/gtk-bookmarks|yes"
	"$HOME/.config/i3/config:graphical/i3|yes"
	"$HOME/.config/dunst/dunstrc:graphical/dunstrc|yes"
	"$HOME/.config/OpenImageIO/iv.conf:graphical/iv.conf|yes"
	"$HOME/.config/rofi/config.rasi:graphical/rofi|yes"
	"$HOME/.config/mimeapps.list:graphical/mimeapps.list|yes"
	"$HOME/.config/redshift.conf:graphical/redshift.conf|yes"
	"$HOME/.config/yad.conf:graphical/yad.conf|yes"
	"$HOME/.icons/default/index.theme:graphical/index.theme|yes"
)
# dir|graphical?
mkdirs=(
	"$HOME/.vim/autoload|no"
	"$HOME/.vim/backup|no"
	"$HOME/.vim/swap|no"
	"$HOME/.config/systemd/user"
	"$HOME/.config/gtk-2.0|yes"
	"$HOME/.config/gtk-3.0|yes"
	"$HOME/.config/git|no"
	"$HOME/.config/i3|yes"
	"$HOME/.config/dunst|yes"
	"$HOME/.config/OpenImageIO|es"
	"$HOME/.config/rofi|yes"
	"$HOME/.gnupg|no"
	"$HOME/.ssh|no"
	"$HOME/.mozilla/native-messaging-hosts|yes"
	"$HOME/.icons/default"
	"$HOME/.cache/mail"
)

# unit|graphical?
units=(
	'dirmngr.socket'
	'gpg-agent.socket'
	'offlineimap.service'
)

autostart=(
	firefox
	spotify
	st
)

###
# Variables
###
BASEDIR="$(dirname "$(dirname "$(readlink -f "${0}")")")"

###
# Colors, taken from makepkg
###
if tput setaf 0 &>/dev/null; then
	ALL_OFF="$(tput sgr0)"
	BOLD="$(tput bold)"
	BLUE="${BOLD}$(tput setaf 4)"
	GREEN="${BOLD}$(tput setaf 2)"
	RED="${BOLD}$(tput setaf 1)"
else
	ALL_OFF="\e[0m"
	BOLD="\e[1m"
	BLUE="${BOLD}\e[34m"
	GREEN="${BOLD}\e[32m"
	RED="${BOLD}\e[31m"
fi
msg() {
	local mesg="${1}"
	shift
	printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}
msg2() {
	local mesg="${1}"
	shift
	printf "${BLUE}  ->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}
error() {
	local mesg="${1}"
	shift
	printf "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

###
# Functions
###

checkDependencies() {
	missing=''
	for dependency in "${dependencies[@]}"; do
		if ! hash "${dependency}" &>/dev/null; then
			missing="${missing} ${dependency}"
		fi
	done

	if [ ! -z "${missing}" ]; then
		error "Could not find all required depdendencies."
		msg "Run pacman -S${missing}"
		exit 1
	fi
}

createlocalconfig() {
	mkdir -pv "${BASEDIR}/local"
	touch "${BASEDIR}/local/zsh"
	touch "${BASEDIR}/local/vim"
	touch "${HOME}/.ssh/config.local"
}

creategitconfig() {
	if ! [ -f "${BASEDIR}/local/gitcustom" ]; then
		read -p "    Please enter your name for the git config: " name
		read -p "    Please enter your mail for the git config: " email
		echo -e "[user]\n\tname = ${name}\n\temail = ${email}\n" > "${BASEDIR}/local/gitcustom"
	else
		msg2 "git configuration already exists."
	fi
}

creategraphicalconfig() {
	if ! [ -f "${BASEDIR}/local/graphical" ] && ! [ -f "${BASEDIR}/local/nographical" ]; then
		read -p "Installing in a graphical environment? [yN] " -n 1 reply
		if [[ "${reply}" =~ ^[YyJj] ]]; then
			touch "${BASEDIR}/local/graphical"
		else
			touch "${BASEDIR}/local/nographical"
		fi
	fi
}

makedirs() {
	for mkdir in "${mkdirs[@]}"; do
		path="`echo "${mkdir}" | awk -F '|' '{print $1}'`"
		graphical="`echo "${mkdir}" | awk -F '|' '{print $2}'`"
		if [ "${graphical}" == 'yes' ]; then
			if [ -f "${BASEDIR}/local/graphical" ]; then
				mkdir -pv "${path}"
			fi
		else
			mkdir -pv "${path}"
		fi
	done
}

link() {
	for file in "${linkfiles[@]}"; do
		filename="`echo "${file}" | awk -F '|' '{print $1}'`"
		linkfrom="`basename "${filename}" | sed 's/^\.\(.*\)/\1/'`"
		# Allow files to be renamed on linking
		if [[ "${filename}" == *":"* ]]; then
			linkfrom="`echo "$filename" | awk -F ':' '{print $2}'`"
			filename="`echo "$filename" | awk -F ':' '{print $1}'`"
		fi
		# Ensure directory exists
		if [ "`echo "$file" | awk -F '|' '{print $2}'`" == 'yes' ]; then
			if [ -f "${BASEDIR}/local/graphical" ]; then
				mkdir -pv "`dirname "${filename}"`"
				ln -svTf "${BASEDIR}/${linkfrom}" "${filename}"
			fi
		else
			mkdir -pv "`dirname "${filename}"`"
			ln -svTf "${BASEDIR}/${linkfrom}" "${filename}"
		fi
	done
	if [ -f "${BASEDIR}/local/graphical" ]; then
		mkdir -pv "${HOME}/.local/share/applications"
		while IFS='' read -r f; do
			ln -vfs "${f}" "${HOME}/.local/share/applications/"
		done < <(find "${BASEDIR}/graphical/applications" -type f)
	fi
}

astart() {
	mkdir -pv "${HOME}/.config/autostart"
	for s in "${autostart[@]}"; do
		touch "${HOME}/.config/autostart/${s}.desktop"
	done
}

systemd() {
	# Link
	msg2 'Link'
	for file in ${BASEDIR}/systemd/*; do
		ln -svTf "${file}" "${HOME}/.config/systemd/user/$(basename "${file}")"
	done
	# Reload
	msg2 'Reload'
	systemctl --user daemon-reload
	# Enable units
	msg2 'Enable'
	for u in "${units[@]}"; do
		systemctl --user enable "${u}"
	done
}

updatesw() {
	msg2 'vim'
	vim +PlugUpdate +qall
	vim +PlugClean! +qall
	msg2 'zsh'
	# Install
	zsh -c "zshconf=\"${BASEDIR}/zsh\" source \"${BASEDIR}/zsh/include/antibody.zsh\""
	# Update
	ANTIBODY_HOME="${BASEDIR}/zsh/antibody/repos" antibody update
	msg2 'Firefox'
	"${BASEDIR}/scripts/ff-addon"
}

updaterepos() {
	git "--git-dir=${BASEDIR}/.git" "--work-tree=${BASEDIR}" submodule init
	git "--git-dir=${BASEDIR}/.git" "--work-tree=${BASEDIR}" submodule update --init --recursive
	git "--git-dir=${BASEDIR}/.git" "--work-tree=${BASEDIR}" submodule foreach git pull origin master
}

msg "Checking requirements..."
checkDependencies
msg "Creating empty directories..."
makedirs
msg "Creating local configuration..."
createlocalconfig
msg "Asking for configuration..."
creategitconfig
creategraphicalconfig
msg "Updating submodules..."
updaterepos
msg "Linking..."
link
msg "Configuring autostart..."
astart
msg "Configuring systemd..."
systemd
msg "Updating plugins..."
updatesw
